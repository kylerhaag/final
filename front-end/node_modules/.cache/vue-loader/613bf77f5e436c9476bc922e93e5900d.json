{"remainingRequest":"/Users/Kyler/Desktop/CS260/CP4/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Kyler/Desktop/CS260/CP4/front-end/src/components/MyTeddys.vue?vue&type=style&index=1&id=eefee1f2&scoped=true&lang=css&","dependencies":[{"path":"/Users/Kyler/Desktop/CS260/CP4/front-end/src/components/MyTeddys.vue","mtime":1618678350834},{"path":"/Users/Kyler/Desktop/CS260/CP4/front-end/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Kyler/Desktop/CS260/CP4/front-end/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/Kyler/Desktop/CS260/CP4/front-end/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/Kyler/Desktop/CS260/CP4/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Kyler/Desktop/CS260/CP4/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnNwYWNlLWFib3ZlIHsKICBtYXJnaW4tdG9wOiA1MHB4Owp9CgpoMSB7CiAgZm9udC1zaXplOiAyOHB4OwogIGZvbnQtdmFyaWFudDogY2FwaXRhbGl6ZTsKfQoKLmhlcm8gewogIHBhZGRpbmc6IDEyMHB4OwogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7Cn0KCi5oZXJvQm94IHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCi5oZXJvIGZvcm0gewogIGZvbnQtc2l6ZTogMTRweDsKfQoKLmhlcm8gZm9ybSBsZWdlbmQgewogIGZvbnQtc2l6ZTogMjBweDsKfQoKaW5wdXQgewogIG1hcmdpbi1yaWdodDogMTBweDsKfQoKLmVycm9yIHsKICBtYXJnaW4tdG9wOiAxMHB4OwogIGRpc3BsYXk6IGlubGluZTsKICBwYWRkaW5nOiA1cHggMjBweDsKICBib3JkZXItcmFkaXVzOiAzMHB4OwogIGZvbnQtc2l6ZTogMTBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDk1MzRmOwogIGNvbG9yOiAjZmZmOwp9Cg=="},{"version":3,"sources":["MyTeddys.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4bA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MyTeddys.vue","sourceRoot":"src/components","sourcesContent":["  <!-- <div class=\"home\">\n    <div>\n      <div v-for=\"teddy in teddys\" :key=\"teddy.name\">\n        <h3>This is {{teddy.name}}</h3>\n        <h3 v-if=\"teddy.gender == 'Female'\">She is {{teddy.age}} years old</h3>\n        <h3 v-else>He is {{teddy.age}} years old</h3>\n\n        <img alt :src=\"'/images/' + teddy.image\" />\n        <p></p>\n        <button @click=\"deleteItem(teddy)\">Remove Teddy</button>\n        <p></p>\n        <button @click=\"openEdits(teddy)\">Edit Teddy's characteristics</button>\n        <p></p>\n        <div v-if=\"edits == true\">\n          <label for=\"name\">Teddy's New Name</label>\n          <input v-model=\"name\" type=\"text\" placeholder=\"name\" />\n          <p></p>\n          <label for=\"age\">Teddy's New Age</label>\n          <input v-model=\"age\" type=\"number\" min=\"0\" />\n          <p></p>\n          <button @click=\"completeEdits(teddy)\">Complete Edits</button>\n        </div>\n      </div>\n    </div>\n    <p></p>\n  </div> -->\n\n  <template>\n  <div class=\"main\">\n    <div class=\"menu\">\n      <p></p>\n      <h2>\n        {{user.firstName}} {{user.lastName}}\n        <button @click=\"logout\">Logout</button>\n      </h2>\n    </div>\n  </div>\n</template>\n\n\nPart 4: Authentication\nUsers need to register for an account and login.\n\nWe will use nearly the same code from our activity on authenticating users. Please see that activity for explanations of this code.\n\nThe only change to this code is to remove roles from user accounts since we won't use them here.\n\nBack end\nCreate a file in the back-end directory called users.js and put the following there:\n\nconst express = require(\"express\");\nconst mongoose = require('mongoose');\nconst argon2 = require(\"argon2\");\n\nconst router = express.Router();\n\n//\n// User schema and model\n//\n\n// This is the schema. Users have usernames and passwords. We solemnly promise to\n// salt and hash the password!\nconst userSchema = new mongoose.Schema({\n  firstName: String,\n  lastName: String,\n  username: String,\n  password: String,\n});\n\n// This is a hook that will be called before a user record is saved,\n// allowing us to be sure to salt and hash the password first.\nuserSchema.pre('save', async function(next) {\n  // only hash the password if it has been modified (or is new)\n  if (!this.isModified('password'))\n    return next();\n\n  try {\n    // generate a hash. argon2 does the salting and hashing for us\n    const hash = await argon2.hash(this.password);\n    // override the plaintext password with the hashed one\n    this.password = hash;\n    next();\n  } catch (error) {\n    console.log(error);\n    next(error);\n  }\n});\n\n// This is a method that we can call on User objects to compare the hash of the\n// password the browser sends with the has of the user's true password stored in\n// the database.\nuserSchema.methods.comparePassword = async function(password) {\n  try {\n    // note that we supply the hash stored in the database (first argument) and\n    // the plaintext password. argon2 will do the hashing and salting and\n    // comparison for us.\n    const isMatch = await argon2.verify(this.password, password);\n    return isMatch;\n  } catch (error) {\n    return false;\n  }\n};\n\n// This is a method that will be called automatically any time we convert a user\n// object to JSON. It deletes the password hash from the object. This ensures\n// that we never send password hashes over our API, to avoid giving away\n// anything to an attacker.\nuserSchema.methods.toJSON = function() {\n  var obj = this.toObject();\n  delete obj.password;\n  return obj;\n}\n\n// create a User model from the User schema\nconst User = mongoose.model('User', userSchema);\n\n/* Middleware */\n\n// middleware function to check for logged-in users\nconst validUser = async (req, res, next) => {\n  if (!req.session.userID)\n    return res.status(403).send({\n      message: \"not logged in\"\n    });\n  try {\n    const user = await User.findOne({\n      _id: req.session.userID\n    });\n    if (!user) {\n      return res.status(403).send({\n        message: \"not logged in\"\n      });\n    }\n    // set the user field in the request\n    req.user = user;\n  } catch (error) {\n    // Return an error if user does not exist.\n    return res.status(403).send({\n      message: \"not logged in\"\n    });\n  }\n\n  // if everything succeeds, move to the next middleware\n  next();\n};\n\n/* API Endpoints */\n\n/* All of these endpoints start with \"/\" here, but will be configured by the\n   module that imports this one to use a complete path, such as \"/api/user\" */\n\n// create a new user\nrouter.post('/', async (req, res) => {\n  // Make sure that the form coming from the browser includes all required fields,\n  // otherwise return an error. A 400 error means the request was\n  // malformed.\n  if (!req.body.firstName || !req.body.lastName || !req.body.username || !req.body.password)\n    return res.status(400).send({\n      message: \"first name, last name, username and password are required\"\n    });\n\n  try {\n\n    //  Check to see if username already exists and if not send a 403 error. A 403\n    // error means permission denied.\n    const existingUser = await User.findOne({\n      username: req.body.username\n    });\n    if (existingUser)\n      return res.status(403).send({\n        message: \"username already exists\"\n      });\n\n    // create a new user and save it to the database\n    const user = new User({\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      username: req.body.username,\n      password: req.body.password\n    });\n    await user.save();\n    // set user session info\n    req.session.userID = user._id;\n\n    // send back a 200 OK response, along with the user that was created\n    return res.send({\n      user: user\n    });\n  } catch (error) {\n    console.log(error);\n    return res.sendStatus(500);\n  }\n});\n\n// login a user\nrouter.post('/login', async (req, res) => {\n  // Make sure that the form coming from the browser includes a username and a\n  // password, otherwise return an error.\n  if (!req.body.username || !req.body.password)\n    return res.sendStatus(400);\n\n  try {\n    //  lookup user record\n    const user = await User.findOne({\n      username: req.body.username\n    });\n    // Return an error if user does not exist.\n    if (!user)\n      return res.status(403).send({\n        message: \"username or password is wrong\"\n      });\n\n    // Return the SAME error if the password is wrong. This ensure we don't\n    // leak any information about which users exist.\n    if (!await user.comparePassword(req.body.password))\n      return res.status(403).send({\n        message: \"username or password is wrong\"\n      });\n\n    // set user session info\n    req.session.userID = user._id;\n\n    return res.send({\n      user: user\n    });\n\n  } catch (error) {\n    console.log(error);\n    return res.sendStatus(500);\n  }\n});\n\n// get logged in user\nrouter.get('/', validUser, async (req, res) => {\n  try {\n    res.send({\n      user: req.user\n    });\n  } catch (error) {\n    console.log(error);\n    return res.sendStatus(500);\n  }\n});\n\n// logout\nrouter.delete(\"/\", validUser, async (req, res) => {\n  try {\n    req.session = null;\n    res.sendStatus(200);\n  } catch (error) {\n    console.log(error);\n    return res.sendStatus(500);\n  }\n});\n\n\nmodule.exports = {\n  routes: router,\n  model: User,\n  valid: validUser\n};\nIn addition, modify server/server.js so it contains the following, before app.listen.\n\n// import the users module and setup its API path\nconst users = require(\"./users.js\");\napp.use(\"/api/users\", users.routes);\nFront end\nWe'll create a front end that provides a way for users to register and login.\n\nWe're going to need axios, so install that now:\n\ncd front-end\nnpm install axios\nUser state\nTo keep track of the currently logged in user, modify main.js so it has the following:\n\nlet data = {\n  user: null\n}\n\nnew Vue({\n  data,\n  router,\n  render: h => h(App)\n}).$mount('#app')\nDashboard\nStart by creating a view in views/Dashboard.vue. We will eventually use this to show a user's photo stream when they are logged in. But when not logged in, it should show registration and login forms.\n\nPlace the following in the template section of this new view:\n\n<template>\n  <div class=\"dashboard\">\n    <MyPhotos v-if=\"user\" />\n    <Login v-else />\n  </div>\n</template>\nThis will load a MyPhotos component to show the photo stream of the logged in user, or a Login component if they are not logged in.\n\nPlace this in the script section of this component:\n\n<script>\nimport MyPhotos from \"@/components/MyPhotos.vue\";\nimport Login from \"@/components/Login.vue\";\nimport axios from \"axios\";\nexport default {\n  name: \"dashboard\",\n  components: {\n    MyPhotos,\n    Login\n  },\n  async created() {\n    try {\n      let response = await axios.get(\"/api/users\");\n      this.$root.$data.user = response.data.user;\n    } catch (error) {\n      this.$root.$data.user = null;\n    }\n  },\n  computed: {\n    user() {\n      return this.$root.$data.user;\n    }\n  }\n};\n</script>\nThis looks a lot like the home page from the authenticating users activity. We use a created() hook to get the user record if the browser has a cookie keeping a previous login active. The user's record is stored in global data. Then, the dashboard shows either the MyPhotos component (if logged in), or the Login component.\n\nAdd this style as well:\n\n<style scoped>\n.dashboard {\n  padding-top: 10px;\n}\n</style>\nRegistration and login\nCreate a new component in components/Login.vue and add the following template:\n\n<template>\n  <div class=\"hero\">\n    <div class=\"heroBox\">\n      <form class=\"pure-form\">\n        <fieldset>\n          <legend>Register for an account</legend>\n          <input placeholder=\"first name\" v-model=\"firstName\" />\n          <input placeholder=\"last name\" v-model=\"lastName\" />\n        </fieldset>\n        <fieldset>\n          <input placeholder=\"username\" v-model=\"username\" />\n          <input type=\"password\" placeholder=\"password\" v-model=\"password\" />\n        </fieldset>\n        <fieldset>\n          <button\n            type=\"submit\"\n            class=\"pure-button pure-button-primary\"\n            @click.prevent=\"register\"\n          >Register</button>\n        </fieldset>\n      </form>\n      <p v-if=\"error\" class=\"error\">{{error}}</p>\n      <form class=\"pure-form space-above\">\n        <fieldset>\n          <legend>Login</legend>\n          <input placeholder=\"username\" v-model=\"usernameLogin\" />\n          <input type=\"password\" placeholder=\"password\" v-model=\"passwordLogin\" />\n        </fieldset>\n        <fieldset>\n          <button type=\"submit\" class=\"pure-button pure-button-primary\" @click.prevent=\"login\">Login</button>\n        </fieldset>\n      </form>\n      <p v-if=\"errorLogin\" class=\"error\">{{errorLogin}}</p>\n    </div>\n  </div>\n</template>\nThis creates two forms, one for registration and another for login, along with associated error messages and event handlers.\n\nHere is the script section, a piece at a time:\n\n<script>\nimport axios from \"axios\";\nexport default {\n  name: \"HomePage\",\n  data() {\n    return {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      password: \"\",\n      usernameLogin: \"\",\n      passwordLogin: \"\",\n      error: \"\",\n      errorLogin: \"\"\n    };\n  }\n};\n</script>\nThis imports axios so we can use it for requests we send to the back end. It also initializes all the data properties this view will use.\n\nNext:\n\n  methods: {\n    async register() {\n      this.error = '';\n      this.errorLogin = '';\n      if (!this.firstName || !this.lastName || !this.username || !this.password)\n        return;\n      try {\n        let response = await axios.post('/api/users', {\n          firstName: this.firstName,\n          lastName: this.lastName,\n          username: this.username,\n          password: this.password,\n        });\n        this.$root.$data.user = response.data.user;\n      } catch (error) {\n        this.error = error.response.data.message;\n        this.$root.$data.user = null;\n      }\n    },\n  }\nThis defines a register() method, which collects the information from the registration form and sends it to the back end to create a new user with the POST /api/users endpoint. If this is successful, the returned user record is stored in global data. Any errors are shown in the template.\n\nFinally:\n\n    async login() {\n      this.error = '';\n      this.errorLogin = '';\n      if (!this.usernameLogin || !this.passwordLogin)\n        return;\n      try {\n        let response = await axios.post('/api/users/login', {\n          username: this.usernameLogin,\n          password: this.passwordLogin,\n        });\n        this.$root.$data.user = response.data.user;\n      } catch (error) {\n        this.errorLogin = \"Error: \" + error.response.data.message;\n        this.$root.$data.user = null;\n      }\n    },\nThis defines a login() method, which collects the information from the login form and sends it to the back end to create a new user with the POST /api/users/login endpoint. If this is successful, the returned user record is stored in global data. Any errors are shown in the template.\n\nFollowing are the styles for this component:\n\n<style scoped>\n.space-above {\n  margin-top: 50px;\n}\n\nh1 {\n  font-size: 28px;\n  font-variant: capitalize;\n}\n\n.hero {\n  padding: 120px;\n  display: flex;\n  justify-content: center;\n}\n\n.heroBox {\n  text-align: center;\n}\n\n.hero form {\n  font-size: 14px;\n}\n\n.hero form legend {\n  font-size: 20px;\n}\n\ninput {\n  margin-right: 10px;\n}\n\n.error {\n  margin-top: 10px;\n  display: inline;\n  padding: 5px 20px;\n  border-radius: 30px;\n  font-size: 10px;\n  background-color: #d9534f;\n  color: #fff;\n}\n</style>\nLogout\nWe now need to add the ability to show the user they are logged in and allow them to logout.\n\nCreate a new component in components/MyPhotos.vue and place the following template there:\n\n<template>\n  <div class=\"main\">\n    <div class=\"menu\">\n      <p>\n        <a>\n          <i class=\"fas fa-image\"></i>\n        </a>\n      </p>\n      <h2>\n        {{user.firstName}} {{user.lastName}}\n        <a @click=\"logout\">\n          <i class=\"fas fa-sign-out-alt\"></i>\n        </a>\n      </h2>\n    </div>\n  </div>\n</template>\nThis shows a button for uploading photos (to be completed later) and a button for logging out.\n\nUse the following for the script portion:\n\n<script>\nimport axios from \"axios\";\nexport default {\n  name: \"MyPhotos\",\n  data() {\n    return {};\n  },\n  computed: {\n    user() {\n      return this.$root.$data.user;\n    }\n  },\n  methods: {\n    async logout() {\n      try {\n        await axios.delete(\"/api/users\");\n        this.$root.$data.user = null;\n      } catch (error) {\n        this.$root.$data.user = null;\n      }\n    }\n  }\n};\n</script>"]}]}